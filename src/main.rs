#![feature(concat_idents)]
#![feature(const_for)]
#![feature(strict_provenance)]
#![no_std]
#![no_main]

mod cores;
mod driver;
mod kernel;
mod aarch64;

use core::arch::global_asm;
use core::fmt::Write;
use core::panic::PanicInfo;
use cores::console::ConsoleContext;
use driver::uart::UartDevice;
use aarch64::intrinsic::{get_cpu_id, stop_cpu};
// This file is generated by Makefile from `entry.S`.
global_asm!(include_str!("entry.asm"));

#[panic_handler]
fn panic(_info: &PanicInfo) -> ! {
    loop {}
}

#[no_mangle]
pub fn main() -> ! {
    // We will only use the first core.
    if get_cpu_id() != 0 {
        stop_cpu();
    }
    clear_bss();
    kernel::init::do_early_init();
    kernel::init::do_init();
    stop_cpu();
}

static mut FILLED_STRING: [u8; 1024] = [0; 1024];

unsafe extern "C" fn test_early_init() {
    for (i, byte) in "Hello world!".bytes().enumerate() {
        FILLED_STRING[i] = byte;
    }
}
define_early_init!(test_early_init);

unsafe extern "C" fn test_init() {
    let mut console = ConsoleContext::new(UartDevice);
    let _ = write!(&mut console, "{}", core::str::from_utf8_unchecked(&FILLED_STRING));
}

define_init!(test_init);

// Clean up the BSS section with zero.
fn clear_bss() {
    // These two symbols are provided by the linker script.
    // See `linker.ld` for more information.
    extern "C" {
        fn sbss();
        fn ebss();
    }
    let start = sbss as usize;
    let end = ebss as usize;
    (start..end).for_each(|a| unsafe { (a as *mut u8).write_volatile(0) });
}
