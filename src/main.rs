#![feature(pointer_byte_offsets)]
#![no_std]
#![no_main]


mod cores;
mod driver;
mod kernel;
mod aarch64;
mod common;

use core::arch::global_asm;
use core::ffi::CStr;
use core::fmt::Write;
use core::panic::PanicInfo;
use spin::RwLock;
use cores::console::ConsoleContext;
use driver::uart::UartDevice;
use aarch64::intrinsic::{get_cpu_id, stop_cpu};
use crate::kernel::init::{check_stack_direction, StackDirection};
// This file is generated by Makefile from `entry.S`.
global_asm!(include_str!("entry.asm"));

#[panic_handler]
fn panic(_info: &PanicInfo) -> ! {
    // Force to unlock the write lock on console.
    unsafe { CONSOLE.force_write_unlock() }
    let mut writer = CONSOLE.write();
    if let Some(writer) = writer.as_mut() {
        let _ = write!(writer, "\n\nkernel panic: {:?}\n", _info);
    }
    loop {}
}

pub static CONSOLE: RwLock<Option<ConsoleContext<UartDevice>>> = RwLock::new(None);

#[no_mangle]
pub fn main() -> ! {
    // We will only use the first core.
    if get_cpu_id() != 0 {
        stop_cpu();
    }
    clear_bss();
    kernel::init::do_early_init();
    kernel::init::do_init();
    for i in 1..=200 {
        let allocated_obj = kernel::mem::kmalloc(64);
    }
    // kernel::mem::kfree_page(allocated_obj);
    stop_cpu();
}

static mut FILLED_STRING: [u8; 1024] = [0; 1024];

pub unsafe extern "C" fn init_console() {
    let mut binding = CONSOLE.write();
    *binding = Some(ConsoleContext::new(UartDevice));
}
define_early_init!(init_console);


// Clean up the BSS section with zero.
fn clear_bss() {
    // These two symbols are provided by the linker script.
    // See `linker.ld` for more information.
    extern "C" {
        fn sbss();
        fn ebss();
    }
    let start = sbss as usize;
    let end = ebss as usize;
    (start..end).for_each(|a| unsafe { (a as *mut u8).write_volatile(0) });
}
