#![feature(pointer_byte_offsets)]
#![feature(const_pointer_byte_offsets)]
#![feature(maybe_uninit_uninit_array)]
#![feature(const_maybe_uninit_uninit_array)]
#![feature(const_mut_refs)]
#![no_std]
#![no_main]

#![feature(default_alloc_error_handler)]
extern crate alloc;

mod cores;
mod driver;
mod kernel;
mod aarch64;
mod common;
mod tests;

use core::arch::global_asm;
use core::fmt::Write;
use core::panic::PanicInfo;
use core::sync::atomic::AtomicBool;
use spin::{Mutex, RwLock};
use cores::console::ConsoleContext;
use driver::uart::UartDevice;
use aarch64::intrinsic::{get_cpu_id, stop_cpu};
use crate::aarch64::intrinsic::dsb_sy;
use crate::kernel::cpu::{set_cpu_off, wait_all_cpu_off};
use crate::kernel::{idle_entry, PANIC_FLAG};
use crate::tests::list::test_list;
// This file is generated by Makefile from `entry.S`.
global_asm!(include_str!("entry.asm"));

static PANIC_LOCK: Mutex<()> = Mutex::new(());

#[panic_handler]
fn panic(_info: &PanicInfo) -> ! {
    let lock = PANIC_LOCK.lock();
    // Force to unlock the write lock on console.
    unsafe { CONSOLE.force_write_unlock() }
    PANIC_FLAG.store(true, core::sync::atomic::Ordering::Relaxed);
    let mut writer = CONSOLE.write();
    if let Some(writer) = writer.as_mut() {
        let _ = write!(writer, "\n\nKernel panic: {:?}\n", _info);
    }
    drop(lock);
    drop(writer);
    set_cpu_off();
    wait_all_cpu_off();
    stop_cpu();
}

pub static CONSOLE: RwLock<Option<ConsoleContext<UartDevice>>> = RwLock::new(None);

static KERNEL_INITED: AtomicBool = AtomicBool::new(false);

fn kernel_init() {
    clear_bss();
    kernel::init::do_early_init();
    kernel::init::do_init();
    KERNEL_INITED.store(true, core::sync::atomic::Ordering::Release);
}

#[no_mangle]
pub fn main() -> ! {
    // We will only use the first core.
    if get_cpu_id() == 0 {
        kernel_init();
    } else {
        while !KERNEL_INITED.load(core::sync::atomic::Ordering::Acquire) {}
        dsb_sy();
    }
    if get_cpu_id() == 0 {
        test_list();
    }
    idle_entry();
}

pub unsafe extern "C" fn init_console() {
    let mut binding = CONSOLE.write();
    *binding = Some(ConsoleContext::new(UartDevice));
}
define_early_init!(init_console);


// Clean up the BSS section with zero.
fn clear_bss() {
    // These two symbols are provided by the linker script.
    // See `linker.ld` for more information.
    extern "C" {
        fn sbss();
        fn ebss();
    }
    let start = sbss as usize;
    let end = ebss as usize;
    (start..end).for_each(|a| unsafe { (a as *mut u8).write_volatile(0) });
}
